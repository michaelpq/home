#!/bin/bash
#--------------------------------------------------------------------------
# postgres_node_init
#	Initialize a new Postgres node, either standby or master.
#	Copyright (c) 2010-2025, Michael Paquier
#
#	Either a master or a standby can be created using this script. As this
#	script is planned to be used with Home only, there is no possibility
#	to set up a foreign host name, all the nodes are running on the local
#	server. If a standby is created, its related master needs to be alive
#	such as a base backup is taken. Port, data folder and branch name
#	need to be given by the	caller. The return result of this script is
#	the creation status of the node. A standby is connected to master using
#	asynchronous streaming replication, and this script just adds the
#	necessary configuration to do that.
#
#	Note that this script can be used also for cascading replication
#	as a root node could be as well another standby.
#
#	Here only the initialization is done. The node will need to be
#	launched afterwards by the caller. This is important because in some
#	test you might want to start a standby with a certain delay.
#
#	When a standby node is created, the application name of the node is
#	harcoded the port it listens to:
#	- node_$PORT
#	This makes things clear regarding what connects to what.
#
#	In the settings, WAL archiving is enabled.
#--------------------------------------------------------------------------

# Immediately leave in case of failure and avoid using unassigned
# variables.
set -eu

# Option check flags
FLAG_PATH=0
FLAG_DATA_FOLDER=0
FLAG_PORT=0
FLAG_STANDBY=0
FLAG_ROOT_PORT=0
FLAG_CONFIG_SUFFIX=0
FLAG_RECOVERY_SUFFIX=0
EXPECTED_ARGS=0

show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -b PATH             Path to Postgres install folder"
	echo "  -c CONFIG_SUFFIX    Specify configuration file suffix for"
	echo "                      custom settings of postgresql.conf."
	echo "                      Works only for a master node."
	echo "  -d DATA_FOLDER      Data folder of the node"
	echo "  -h                  Show this help and leave"
	echo "  -p PORT             Port of the node"
	echo "  -q MASTER_PORT      Port of root node this standby needs to use"
	echo "  -r RECOVERY_SUFFIX  Specify file suffix for recovery parameters"
	echo "                      Works only for standby node."
	echo "  -s                  Create a standby"
	echo " "
	echo "Notes:"
	echo "- CONFIG_SUFFIX helps in specifying a configuration file located"
	echo "  in $HOME_POSTGRES_ETC containing parameter values for"
	echo "  postgresql.conf that are non-environment specific or generated"
	echo "  automatically by Home scripts like port or archive_command."
	echo "  This is useful for debugging purposes or to plug in modules."
	echo "  The suffix designates a file name of postgresql.$CONFIG_SUFFIX.conf."
	echo "  This option has no effect for a standby node."
	echo "- Similarly to CONFIG_SUFFIX, RECOVERY_SUFFIX works recovery parameters"
	echo "  and recovery.$RECOVERY_SUFFIX.conf. This option has no effect for"
	echo "  a master node."
	echo "- A standby node inherits its postgresql.conf parameters directly"
	echo "  from the master node it is connected to."
	echo "- Default value is \"dev\" for CONFIG_SUFFIX and RECOVERY_SUFFIX."
	exit $ERROR_NUM
}

# Read options
while getopts 'b:c:d:hp:q:r:s' OPTION
do
	case $OPTION in
	b)	# Path to point to Postgres binaries
		PSQL_USER_PATH="$OPTARG"
		FLAG_PATH=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	c)	# Specify configuration file suffix
		CONFIG_SUFFIX="$OPTARG"
		FLAG_CONFIG_SUFFIX=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	d)	# Data folder of the new node
		FLAG_DATA_FOLDER=1
		NODE_DATA_FOLDER="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	h)	# Show this help
		show_help 1
		;;
	p)	# Port of the new node
		FLAG_PORT=1
		NODE_PORT="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	q)	# Port of the root node if standby is created
		FLAG_ROOT_PORT=1
		ROOT_PORT="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	r)	# Specify recovery file settings
		FLAG_RECOVERY_SUFFIX=1
		RECOVERY_SUFFIX="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Flag for standby creation
		FLAG_STANDBY=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	?)	# Leave with an error code
		show_help 1
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]; then
	# Leave with an error code
	show_help 1
fi

# Perform safety checks
# Specifying a port is mandatory
if [ "$FLAG_PORT" == 0 ]; then
	echo "Specifying a port is mandatory"
	show_help 1
fi
# Specifying a data folder is mandatory
if [ "$FLAG_DATA_FOLDER" == 0 ]; then
	echo "Specifying a data folder is mandatory"
	show_help 1
fi
# If a standby is wanted, specifying a root node port is mandatory
if [ "$FLAG_STANDBY" == 1 -a "$FLAG_ROOT_PORT" == 0 ]; then
	echo "Specifying a root node port is mandatory when creating a standby"
	show_help 1
fi
# Cannot specify a root node port if no standby is wanted
if [ "$FLAG_STANDBY" == 0 -a "$FLAG_ROOT_PORT" == 1 ]; then
	echo "No root port can be specified if a master is created"
	show_help 1
fi

#Set default PSQL install folder to the one wanted by user
if [ "$FLAG_PATH" == 1 ]; then
	PSQL_FOLDER=$PSQL_USER_PATH
else
	# Set up default
	PSQL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Installation folder set to default $PSQL_FOLDER"
fi

# Newline format, this changes depending on the platform where this
# script is run (Looking at you, windows...)
if [[ $HOME_ENV_NAME == MINGW* ]]; then
	CONF_NEWLINE="\r\n"
else
	CONF_NEWLINE="\n"
fi

# Set configuration suffix if specified by user. Take also care of the
# default value "dev".
if [ "$FLAG_CONFIG_SUFFIX" == 0 ]; then
	CONFIG_SUFFIX="dev"
fi
# Check existence of configuration file
USER_CONFIG_FILE=$HOME_POSTGRES_ETC/postgresql.$CONFIG_SUFFIX.conf
if [ ! -f $USER_CONFIG_FILE ]; then
	echo "No custom configuration file with suffix $USER_CONFIG_FILE found"
	echo "File path is $USER_CONFIG_FILE"
	exit 1
fi

# Set recovery suffix if specified by user.
if [ "$FLAG_RECOVERY_SUFFIX" == 0 ]; then
	RECOVERY_SUFFIX="dev"
fi
# Check existence of configuration file
USER_RECOVERY_FILE=$HOME_POSTGRES_ETC/recovery.$RECOVERY_SUFFIX.conf
if [ ! -f $USER_CONFIG_FILE ]; then
	echo "No custom configuration file with suffix $USER_RECOVERY_FILE found"
	echo "File path is $USER_RECOVERY_FILE"
	exit 1
fi

# Some environment variables
PSQL_BIN=$PSQL_FOLDER/bin
INITDB=$PSQL_BIN/initdb
PGBASEBACKUP=$PSQL_BIN/pg_basebackup

# Folder for archives, enforce its creation if it does not exist
if [ ! -d $HOME_POSTGRES_ARCHIVE ]; then
	mkdir -p $HOME_POSTGRES_ARCHIVE
fi

# Current node archive folder
NODE_ARCHIVE=$HOME_POSTGRES_ARCHIVE/$NODE_PORT
# Enforce creation of new archive folder for node
if [ -d $NODE_ARCHIVE ]; then
	rm -r $NODE_ARCHIVE
fi
mkdir $NODE_ARCHIVE

# Options of pg_hba.conf to allow replication. On Windows, we have special
# needs caused by first the system user name tracked as USERNAME and not
# USER, and the lack of support for local connections.
if [[ $HOME_ENV_NAME == MINGW* ]]; then
	CLUSTER_USER=$USERNAME
	OPTIONS_PGHBA="host replication $CLUSTER_USER 127.0.0.1/32 trust$CONF_NEWLINE"\
"host replication $CLUSTER_USER ::1/128 trust$CONF_NEWLINE"
else
	CLUSTER_USER=$USER
	OPTIONS_PGHBA="host replication $CLUSTER_USER 127.0.0.1/32 trust$CONF_NEWLINE"\
"host replication $CLUSTER_USER ::1/128 trust$CONF_NEWLINE"\
"local replication $CLUSTER_USER trust$CONF_NEWLINE"
fi

# Enforce deletion of data folder if it exists
if [ -d $NODE_DATA_FOLDER ]; then
	echo "Data folder $NODE_DATA_FOLDER exists, enforcing its removal"
	rm -rf $NODE_DATA_FOLDER
fi

# Create a master node
if [ "$FLAG_STANDBY" == 0 ]; then
	# Local unix sockets are prioritized for security purposes when running
	# development. On Windows though, localhost is more flexible.
	if [[ $HOME_ENV_NAME == MINGW* ]]; then
		OPTIONS_POSTGRESQL+="listen_addresses = 'localhost'$CONF_NEWLINE"
	else
		OPTIONS_POSTGRESQL+="listen_addresses = ''$CONF_NEWLINE"
	fi

	# Some logging information
	echo "Master node information..."
	echo "- Port: $NODE_PORT"
	echo "- Data folder: $NODE_DATA_FOLDER"
	echo "- Archive folder: $NODE_ARCHIVE"

	# Initialize the data folder of this node
	$INITDB --noclean --nosync -D $NODE_DATA_FOLDER

	# Set postgresql.conf
	echo -e $OPTIONS_POSTGRESQL >> $NODE_DATA_FOLDER/postgresql.conf

	# Apply custom parameters for postgresql.conf
	cat $USER_CONFIG_FILE >> $NODE_DATA_FOLDER/postgresql.conf

	# Set up pg_hba.conf with replication settings. For a standby this
	# is taken with pg_basebackup. No archives are used
	echo -e $OPTIONS_PGHBA >> $NODE_DATA_FOLDER/pg_hba.conf
else
	# If new node is a standby, fetch archives from root node
	ROOT_ARCHIVE=$HOME_POSTGRES_ARCHIVE/$ROOT_PORT

	# Some logging information
	echo "Standby node information..."
	echo "- Port: $NODE_PORT"
	echo "- Data folder: $NODE_DATA_FOLDER"
	echo "- Archive folder: $NODE_ARCHIVE"
	echo "- Root port: $ROOT_PORT"

	# Node-related parameters for recovery
	OPTIONS_STANDBY_RECOVERY="restore_command = 'cp $ROOT_ARCHIVE/%f %p'$CONF_NEWLINE"\
"primary_conninfo = 'port=$ROOT_PORT user=$CLUSTER_USER application_name=node_$NODE_PORT'$CONF_NEWLINE"

	# Initialize a standby with a fresh base backup
	$PGBASEBACKUP -p $ROOT_PORT -D $NODE_DATA_FOLDER

	# Set recovery.conf
	echo -e $OPTIONS_STANDBY_RECOVERY >> $NODE_DATA_FOLDER/postgresql.conf

	# Set custom parameters
	cat $USER_RECOVERY_FILE >> $NODE_DATA_FOLDER/postgresql.conf

	# Set standby and recovery states
	touch $NODE_DATA_FOLDER/recovery.signal
	touch $NODE_DATA_FOLDER/standby.signal
fi

# Node-related parameters for postgresql.conf. Those values need to
# be generated by the script itself to ensure correct settings for
# the new node. You can still enforce values for certain parameters
# to set them directly in the custom configuration file as this
# custom file is applied after those settings.

# Enforce the port number of the standby, this setting is added at the bottom
# of postgresql.conf, this way it will be enforced to this new value.
cat <<EOF >> $NODE_DATA_FOLDER/postgresql.conf
port = $NODE_PORT
archive_command = 'cp %p $NODE_ARCHIVE/%f'
EOF

# Node started safely
exit 0
