#!/bin/bash
#--------------------------------------------------------------------------
# pg_start
#	Start a PostgreSQL cluster
#	Copyright (c) 2010-2025, Michael Paquier
#
#	The cluster is built using postgres_* infrastructure of Home.
#--------------------------------------------------------------------------

# Immediately leave in case of failure and avoid using unassigned
# variables.
set -eu

# Take and check options
EXPECTED_ARGS=0
NUM_SLAVES=0
FLAG_PATH=0
FLAG_CONFIG_SUFFIX=0
FLAG_RECOVERY_SUFFIX=0
FLAG_VERSION=0

# Show utility help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -c CONFIG_SUFFIX    Define suffix for configuration settings of"
	echo "                      postgresql.conf. See postgres_node_init for"
	echo "                      more details. Default is \"dev\"."
	echo "  -h                  Show this help"
	echo "  -p PATH             Path to Postgres install folder"
	echo "                      The same folder is used to store data folders"
	echo "  -r CONFIG_SUFFIX    Define suffix for configuration settings of"
	echo "                      recovery.conf. See postgres_node_init for"
	echo "                      more details. Default is \"dev\"."
	echo "  -s number_slaves    Choose number of slaves behind a node"
	echo "  -v                  Output installation version and leave"
	exit $ERROR_NUM
}

# Check installation for given folder
check_install()
{
	PSQL_INSTALL_PATH=$1

	# Check presence of bin
	if [ ! -d $PSQL_INSTALL_PATH/bin ]; then
		echo "Missing folder $PSQL_INSTALL_PATH/bin in installation"
		exit 1
	fi
	# Check presence of lib
	if [ ! -d $PSQL_INSTALL_PATH/lib ]; then
		echo "Missing folder $PSQL_INSTALL_PATH/lib in installation"
		exit 1
	fi
	# Check presence of share
	if [ ! -d $PSQL_INSTALL_PATH/share ]; then
		echo "Missing folder $PSQL_INSTALL_PATH/share in installation"
		exit 1
	fi
	# Check presence of lib
	if [ ! -d $PSQL_INSTALL_PATH/include ]; then
		echo "Missing folder $PSQL_INSTALL_PATH/include in installation"
		exit 1
	fi
}

# Start node depending on environment
# On Linux/Unix only a pg_ctl start is enough while with Windows systems
# it is better to register the service and then start it using the service
# manager to make the instance global and not sticked only to the session
# where this script was kicked. Note that service registration only works
# when the code has been compiled with MSVC as a build with MinGW creates
# library dependencies that are not completely covered when using commands
# in a prompt. This script can be safely kicked with msysgit though.
start_node()
{
	PORT=$1
	DATA_FOLDER=$2
	if [[ $HOME_ENV_NAME == MINGW* ]]; then
		SERVICE_NAME=postgres_$PORT
		$PSQL_FOLDER/bin/pg_ctl register -w -D $DATA_FOLDER \
			-N $SERVICE_NAME
		sc start $SERVICE_NAME
		sleep 1
	else
		# Slaves need the base backup of master first, so start it
		$PSQL_FOLDER/bin/pg_ctl start -w -D $DATA_FOLDER
	fi
}

# Check an non-zero code, exit if found
check_error()
{
	ERRNUM=$1
	if [ $ERRNUM != 0 ]; then
		exit $ERRNUM
	fi
}

# Show installation version and leave
show_version()
{
	PSQL_INSTALL_PATH=$1

	# Check that postgres binary exists
	if [ ! -x $PSQL_INSTALL_PATH/bin/postgres ]; then
		echo "Unexisting $PSQL_INSTALL_PATH/bin/postgres binary"
		echo "You should check your installation"
		exit 1
	fi

	# Output version
	echo `$PSQL_INSTALL_PATH/bin/postgres --version`
	exit 0
}

# Treat options
while getopts 'c:hp:r:s:v' OPTION
do
	case $OPTION in
	c)	# Suffix for configuration settings of postgresql.conf
		# Option value used directly with postgres_node_init.
		FLAG_CONFIG_SUFFIX=1
		CONFIG_SUFFIX="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	h)  # Show this help
		show_help 0
		;;
	p)	# Path to postgres install folder
		FLAG_PATH=1
		PSQL_USER_PATH="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	r)	# Suffix for configuration settings of recovery.conf
		# Option value used directly with postgres_node_init.
		FLAG_RECOVERY_SUFFIX=1
		RECOVERY_SUFFIX="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Number of slaves attached to the main node
		NUM_SLAVES="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	v)	# Version output
		FLAG_VERSION=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	?)	#Leave without an error code
		show_help 0
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]; then
	# Leave with an error code
	show_help 1
fi

# Safety checks
# Check if there are any non-digit characters in number of slaves
NUM_SLAVES_CHECK=`echo $NUM_SLAVES | tr -d "[:digit:]"`
if [ ! -z $NUM_SLAVES_CHECK ]; then
	echo "$NUM_SLAVES is not an integer"
	exit 1
fi

# Set default suffix value of configuration settings
if [ "$FLAG_CONFIG_SUFFIX" == 0 ]; then
    CONFIG_SUFFIX="dev"
fi

# Set default suffix value of recovery settings
if [ "$FLAG_RECOVERY_SUFFIX" == 0 ]; then
    RECOVERY_SUFFIX="dev"
fi

# Set default PSQL install folder to the one wanted by user
if [ "$FLAG_PATH" == 1 ]; then
	PSQL_FOLDER=$PSQL_USER_PATH
else
	# Set up default
	PSQL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Installation folder set to default $PSQL_FOLDER"
fi

# Check installation on this folder
check_install $PSQL_FOLDER

# Show up version if requested
if [ "$FLAG_VERSION" == 1 ]; then
	show_version $PSQL_FOLDER
fi

# Check if data folder exists and create it if necessary
if [ ! -d $HOME_POSTGRES_DATA ]; then
	mkdir $HOME_POSTGRES_DATA
fi

# Initialize the master node
MASTER_PORT=`postgres_get_port`
MASTER_DATA=$HOME_POSTGRES_DATA/$MASTER_PORT
postgres_node_init -c $CONFIG_SUFFIX -p $MASTER_PORT -d $MASTER_DATA \
	-b $PSQL_FOLDER
check_error $?

# Start up master node.
start_node $MASTER_PORT $MASTER_DATA

# Now initialize and start the slaves if any
if [ "$NUM_SLAVES" -gt 0 ]; then
	i=1
	while [ $i -le $NUM_SLAVES ]
	do
		SLAVE_PORT=`postgres_get_port`
		SLAVE_DATA=$HOME_POSTGRES_DATA/$SLAVE_PORT
		postgres_node_init -d $SLAVE_DATA -p $SLAVE_PORT -q $MASTER_PORT -s \
			-b $PSQL_FOLDER -r $RECOVERY_SUFFIX
		check_error $?
		start_node $SLAVE_PORT $SLAVE_DATA
		i=`expr $i + 1`
	done
fi

echo "Creating database $USER"
$PSQL_FOLDER/bin/createdb $USER -p $MASTER_PORT

# Output result
exit `echo $?`
