#!/bin/bash
#--------------------------------------------------------------------------
# pg_upgrade_test
#	Test pg_upgrade between 2 existing stable versions
#	Copyright (c) 2010-2025, Michael Paquier
#
#	When dev is specified as a version, the version installed in
#	HOME_POSTGRES_INSTALL is used as second path. For simplicity,
#	This patch
#--------------------------------------------------------------------------

# Immediately leave in case of failure and avoid using unassigned
# variables.
set -eu

# Option-related variables
EXPECTED_ARGS=0
FLAG_FILE=0
NEW_VERSION="dev"
OLD_VERSION="dev"

# Show utility help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -f FILE      SQL file to upload objects on old cluster"
	echo "  -h           Show help and exit"
	echo "  -n BRANCH    New version to upgrade to"
	echo "  -o BRANCH    Old version to upgrade from"
	echo "Notes:"
	echo "- Version number needs to be set to the branch name of the version"
	echo "  required for test: \"REL9_3_STABLE\" for example for 9.3, version"
	echo "  maintained by pg_binarchive. It can also be set to \"dev\" to"
	echo "  choose the version currently compiled in dev path."
	echo "- For simplicity, no check is done on version order"
    exit $ERROR_NUM
}

check_version_available()
{
	VERSION_TO_CHECK=$1
	# Check if a development version is used
	if [ $VERSION_TO_CHECK == "dev" ]; then
		if [ ! -d $HOME_POSTGRES_INSTALL ]; then
			echo "No installation available in $HOME_POSTGRES_INSTALL"
			exit 1
		fi
		if [ ! -d $HOME_POSTGRES_INSTALL/bin ]; then
			echo "No binaries available in $HOME_POSTGRES_INSTALL/bin"
			exit 1
		fi
		if [ ! -d $HOME_POSTGRES_INSTALL/lib ]; then
			echo "No libraries available in $HOME_POSTGRES_INSTALL/lib"
			exit 1
		fi
	else
		# Check the case of a normal version
		CHECK_INSTALL_PATH=$HOME_STABLE_BIN/$VERSION_TO_CHECK
		if [ ! -d $CHECK_INSTALL_PATH ]; then
			echo "No installation available in $CHECK_INSTALL_PATH"
			echo "Be sure to run pg_binarchive to set up such versions"
			exit 1
		fi
		if [ ! -d $CHECK_INSTALL_PATH/bin ]; then
			echo "No binaries available in $CHECK_INSTALL_PATH/bin"
			echo "Be sure to run pg_binarchive to set up such versions"
			exit 1
		fi
		if [ ! -d $CHECK_INSTALL_PATH/lib ]; then
			echo "No libraries available in $CHECK_INSTALL_PATH/lib"
			echo "Be sure to run pg_binarchive to set up such versions"
			exit 1
		fi
	fi
}

# Treat options
while getopts 'f:hn:o:' OPTION
do
	case $OPTION in
	f)	# File to upload objects to old cluster
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		SQL_FILE_UPLOAD="$OPTARG"
		FLAG_FILE=1
		;;
	h)	# Show help
		show_help 0
		;;
	n)	# New cluster version to update to
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		NEW_VERSION="$OPTARG"
		;;
	o)	# Old cluster version to update from
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		OLD_VERSION="$OPTARG"
		;;
	?)	# Leave without an error code
		show_help 0
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]; then
	# Leave with an error code
	show_help 1
fi

# Check file presence if any defined
if [ "$FLAG_FILE" == 1 ]; then
	if [ ! -f $SQL_FILE_UPLOAD ]; then
		echo "File not found: $SQL_FILE_UPLOAD"
		exit 1
	fi
fi

# Check if versions are available
check_version_available $OLD_VERSION
check_version_available $NEW_VERSION

# If the old or new versions are tagged as dev, point to the
# default installation of tree, and use the stable versions
# if that is not the case.
if [ $OLD_VERSION == "dev" ]; then
	BIN_OLD_VERSION=$HOME_POSTGRES_INSTALL/bin
else
	BIN_OLD_VERSION=$HOME_STABLE_BIN/$OLD_VERSION/bin
fi
if [ $NEW_VERSION == "dev" ]; then
	BIN_NEW_VERSION=$HOME_POSTGRES_INSTALL/bin
else
	BIN_NEW_VERSION=$HOME_STABLE_BIN/$NEW_VERSION/bin
fi

# Data folders are installed in HOME_POSTGRES_DATA similarly to
# the development version
DATA_OLD_VERSION=$HOME_POSTGRES_DATA/$OLD_VERSION
DATA_NEW_VERSION=$HOME_POSTGRES_DATA/$NEW_VERSION

# Take into account the case where an upgrade is done through the same
# version.
if [ "$DATA_OLD_VERSION" == "$DATA_NEW_VERSION" ]; then
	DATA_NEW_VERSION=${DATA_NEW_VERSION}_2
fi


# Remove old folders if any
if [ -d $DATA_OLD_VERSION ]; then
	rm -r $DATA_OLD_VERSION
fi
if [ -d $DATA_NEW_VERSION ]; then
	rm -r $DATA_NEW_VERSION
fi

# Create cluster for old version
# Note: it might be better to use pg_start here but it looks better to rely
# on default options for this test
$BIN_OLD_VERSION/initdb -D $DATA_OLD_VERSION
cat <<EOF >> $DATA_OLD_VERSION/postgresql.conf
port = 6665
logging_collector = on
log_statement = 'all'
log_checkpoints = on
log_directory = 'log'
EOF

# Start it
$BIN_OLD_VERSION/pg_ctl -w -D $DATA_OLD_VERSION start

# Create cluster for new version
$BIN_NEW_VERSION/initdb -D $DATA_NEW_VERSION
cat <<EOF >> $DATA_NEW_VERSION/postgresql.conf
port = 6666
logging_collector = on
log_statement = 'all'
log_checkpoints = on
log_directory = 'log'
EOF

# Start it
$BIN_NEW_VERSION/pg_ctl -w -D $DATA_NEW_VERSION start

# Upload some objects in old cluster
if [ "$FLAG_FILE" == 1 ]; then
	$BIN_OLD_VERSION/psql -f $SQL_FILE_UPLOAD -p 6665 postgres
fi

# Stop the nodes
$BIN_OLD_VERSION/pg_ctl -w -D $DATA_OLD_VERSION -m fast stop
$BIN_NEW_VERSION/pg_ctl -w -D $DATA_NEW_VERSION -m fast stop

# Perform the upgrade by using the version of the newest version
$BIN_NEW_VERSION/pg_upgrade -b $BIN_OLD_VERSION -B $BIN_NEW_VERSION \
	-d $DATA_OLD_VERSION -D $DATA_NEW_VERSION
