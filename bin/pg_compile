#!/bin/bash
#--------------------------------------------------------------------------
# pg_compile
#	Copy and compile PostgreSQL or Postgres-XC code
#	Copyright (c) 2010-2025, Michael Paquier
#
#	The code used for compilation is a copy of an original code.
#--------------------------------------------------------------------------

# Immediately leave in case of failure and avoid using unassigned
# variables.
set -eu

# Take and check options
EXPECTED_ARGS=0
FLAG_CONFIGURE=0
FLAG_PATH=0
# Code copy flags
FLAG_SRC_FOLDER=0

# Show help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -c       Leave after configure"
	echo "  -h       Show this help"
	echo "  -i PATH  Define source folder"
	echo "  -p PATH  Define installation folder"

	exit $ERROR_NUM
}

# Treat options
while getopts 'chi:p:s:' OPTION
do
	case $OPTION in
	c)	# Only configure
		FLAG_CONFIGURE=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	h)	# Help
		show_help 0
		;;
	i)  # Source folder where the build happens.
		FLAG_SRC_FOLDER=1
		USER_SRC_FOLDER="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	p)	# Installation folder
		FLAG_PATH=1
		USER_INSTALL_FOLDER="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	?)	# Help
		show_help 1
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]; then
	show_help 1
fi

# Set input folder value
if [ "$FLAG_SRC_FOLDER" == 1 ]; then
	PSQL_SRC_FOLDER=$USER_SRC_FOLDER
else
	# Use global source folder as default
	PSQL_SRC_FOLDER=$HOME_POSTGRES_SRC
	echo "Using default input folder $PSQL_SRC_FOLDER"
fi

# Define installation folder
if [ "$FLAG_PATH" == 1 ]; then
	PSQL_INSTALL_FOLDER=$USER_INSTALL_FOLDER
else
	# Use global install folder as default
	PSQL_INSTALL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Using default installation folder $PSQL_INSTALL_FOLDER"
fi

# Guard against ripping once an entire server if this is not set as previous
# installations are simply deleted.
if [ -z "$PSQL_INSTALL_FOLDER" ]; then
	echo "Installation folder undefined"
	exit 1
fi

# Get commit of current HEAD for custom version string
GIT_CURRENT=`cd $HOME_POSTGRES_SRC && git rev-parse --short HEAD`

# General options for configure, used for all builds
CONFIGURE_OPTIONS+="--prefix=$PSQL_INSTALL_FOLDER "
CONFIGURE_OPTIONS+="--with-extra-version=-$GIT_CURRENT "

# Specify number of cores to use for compilation
if [[ $HOME_ENV_NAME == Darwin ]]; then
	NUM_CORES=`sysctl -n hw.ncpu`
else
	# Linux/Unix
	NUM_CORES=`nproc`
fi

# Perform configure, build and installation, here calling configure from
# the source folder is enough.
cd $PSQL_SRC_FOLDER

# Get the root folder of the current source directory, to be able
# to call ./configure.  This script does not support VPATH builds.
CONFIGURE_CALL_FOLDER=`git rev-parse --show-toplevel`

# Move to root folder of git tree to not trigger VPATH install
cd $CONFIGURE_CALL_FOLDER

# Platform-specific configure commands
./configure CFLAGS="$HOME_POSTGRES_CFLAGS" \
	LDFLAGS="$HOME_POSTGRES_LDFLAGS" \
	$CONFIGURE_OPTIONS $HOME_POSTGRES_CONFIGURE

# If only configure has been requested, leave now
if [ "$FLAG_CONFIGURE" == 1 ]; then
	echo "Only configure has been requested, leaving..."
	exit 0
fi

# Before installing anything, rip off completely the existing installation.
# This avoids game dependencies for example with header files across major
# versions.
rm -rf $PSQL_INSTALL_FOLDER/*

# Compile and install
make install -j $NUM_CORES

# Install contrib modules
cd contrib/
make -j $NUM_CORES install
cd ..

# Install test modules
cd src/test/modules
make -j $NUM_CORES install
cd ../../..

# The regression library is not installed by default, so copy it
# in $libdir to make it loadable.  This improves the portability
# of the main regression test suite.
DLSUFFIX=".so"
if [[ $HOME_ENV_NAME == Darwin ]]; then
	DLSUFFIX=".dylib"
fi

LIBDIR=$($PSQL_INSTALL_FOLDER/bin/pg_config --libdir)
cp src/test/regress/regress${DLSUFFIX} ${LIBDIR}
